    整个服务器构成为单线程多进程，基本分为一个网络进程、一个log进程、一个DB进程、一个数据服进程、多个逻辑服进程。进程之前通过POSIX有名共享内存(/dev/shm)进程通信，通过
POSIX有名信号量同步。
    消息格式为 fd|param|content，其中，fd为int32,param为uint8，content则为长度(uint32)+内容。下面举例说明各个进程间如何通信。fd为文件描述符。

    网络进程-------->数据服进程:
    当一个新的连接产生，网络进程产生一个CTcpSocket对象。然后该CTcpSocket会收到消息，此时会向数据服进程发送消息，fd即为socket连接的真实文件描述符。数据服收
到消息后创建相应的NET对象，记录此文件描述符。此时，双方持有相同文件描述符，以此为凭证交互。

    数据服进程-------->网络进程：
    如果数据服需要发起新的连接，则需要跟网络进程通信。但这时socket并没有建立，没有唯一的fd。因此，数据服需要产生一个唯一的id(如直接使用uid或某些特殊id)，并
在param标明fd为虚拟fd。网络进程收到消息后，记录此虚拟fd。建立socket连接，产生真实的fd，然后向数据服发送消息(fd为记录的虚拟id，content包含真实fd)。数据服收
到后记录真实id，此后按fd交互。

    数据服<-------->逻辑服：
    通信总是由数据服发起，逻辑服处理完成后回复。故数据服每次发送虚拟fd即可。建议使用uid。数据服收到回复后根据虚拟fd处理消息或是转发。

    数据服<-------->DB
    参考数据服<-------->逻辑服。

    各个进程------->log进程
    服务器启动后，会按规则创建log进程的共享内存及信号量。其他进程只需要凭借名字就可写入。然后log进程读取。

网络进程不与log进程、逻辑进程通信。log进程只收不发。

PS：原本设定网络进程不与逻辑进程通信。因此需要数据服转发。但可以考虑：数据服当作路由使用，转发消息时向玩家所在逻辑进程转发并表明socket fd。逻辑服处理完成后，
数据向数据服同步，结果可直接向网络进程的共享内存写入。可提高速度。

虚拟fd的设计，可考虑指针地址。
